#include <iostream>
#include <fstream>
#include <string>
#include <vector>

#include "TClass.h"
#include "TApplication.h"
#include "TGClient.h"
#include "TROOT.h"
#include "TH1.h"
#include "TStyle.h"
#include "TClass.h"
#include "TFile.h"

#include "IUAmpTools/AmpToolsInterface.h"
#include "IUAmpTools/FitResults.h"

#include "AmpPlotter/PlotterMainWindow.h"
#include "AmpPlotter/PlotFactory.h"

#include "KsKlPlotGenerator.h"
#include "AMPTOOLS_DATAIO/ROOTDataReader.h"
#include "AMPTOOLS_AMPS/TwoPSHelicity.h"
#include "AMPTOOLS_AMPS/Zlm.h"
#include "AMPTOOLS_AMPS/Piecewise.h"
#include "AMPTOOLS_AMPS/BreitWigner.h"
#include "AMPTOOLS_AMPS/Flatte.h"

typedef EtaPiPlotGenerator PlotGen;

void atiSetup(){
  
  AmpToolsInterface::registerAmplitude( TwoPSHelicity() );
  AmpToolsInterface::registerAmplitude( Zlm() );
  AmpToolsInterface::registerAmplitude( BreitWigner() );
  AmpToolsInterface::registerAmplitude( Piecewise() );
  AmpToolsInterface::registerAmplitude( Flatte() );
  AmpToolsInterface::registerDataReader( ROOTDataReader() );
}

using namespace std;

int main( int argc, char* argv[] ){
  
  
      // ************************
      // usage
      // ************************
  
    auto help_message = []()
    {
        cout << "\t-s <amp string> choose a subset of amplitudes to plot. _ separated     -- i.e. S0+_D0+" << endl;
        cout << "\t-g <file>\t show GUI" << endl;
        exit(1);
    };
    
    if (argc < 2){
      cout << "======\nUsage:" << endl << "======" << endl;
      cout << "kskl_plotter <results file name> -o <output file name> -s <amp string>    " << endl << endl;
      help_message();
      return 0;
    }

    bool doAccCorr=false;
  
    bool showGui = false;
    string outName = "kskl_plotter.root";
    string resultsName(argv[1]);
    bool keepAllAmps=true; // always resort to plotting all the amps
    string ampString;
    for (int i = 2; i < argc; i++){
  
      string arg(argv[i]);
  
      if (arg == "-g"){
        showGui = true;
      }
      if (arg == "-h"){
          help_message();
        exit(1);
      }
      if (arg == "-s"){
          ampString=argv[++i];
          if (ampString==""){ 
              keepAllAmps=true;
          }
          else {
              keepAllAmps=false;
          }
      }
    }
    // ************************
    // parse the command line parameters
    // ************************
    cout << "Fit results file name    = " << resultsName << endl;

    // ************************
    // load the results and display the configuration info
    // ************************
    FitResults results( resultsName );
    if( !results.valid() ){
      cout << "Invalid fit results in file:  " << resultsName << endl;
      exit( 1 );
    }

    // ************************
    // set up the plot generator
    // ************************
    atiSetup();
    cout << "Loading FitResults into PlotGen" << endl;
    PlotGen plotGen( results );

    // ************************
    // start the GUI
    // ************************
    if(showGui) {
          cout << ">> Plot generator ready, starting GUI..." << endl;
          
          int dummy_argc = 0;
          char* dummy_argv[] = {};  
          TApplication app( "app", &dummy_argc, dummy_argv );
          
          gStyle->SetFillColor(10);
          gStyle->SetCanvasColor(10);
          gStyle->SetPadColor(10);
          gStyle->SetFillStyle(1001);
          gStyle->SetPalette(1);
          gStyle->SetFrameFillColor(10);
          gStyle->SetFrameFillStyle(1001);
          
          PlotFactory factory( plotGen );	
          PlotterMainWindow mainFrame( gClient->GetRoot(), factory );
          app.Run();
          return 0;
    }
    
    // ************************
    // Saving plots
    // ************************
    if (keepAllAmps)
        cout << "\n------------\nPlotting all amplitudes\n------------" << endl;

    string waveset; 
    string wave;
    stringstream ss_wavesets(ampString);
    while(getline(ss_wavesets, waveset, ';')){
        cout << "waveset: " << waveset << endl;
        map<string,int> selectedAmps;
        stringstream ss_waves(waveset);
        cout << "\n------------\nPlotting only with these amplitude contributions:" << endl;
        while(getline(ss_waves, wave, '_')){
            selectedAmps[wave] = -1; // Just building map. -1 is placeholder
            cout << wave << endl;
        }
        cout << "------------\n" << endl;

        outName = "kskl_plot_"+waveset+".root";
        cout << "Output file name    = " << outName << endl << endl;

        // ************************
        // set up an output ROOT file to store histograms
        // ************************

        cout << "Creating output file" << endl;
        TFile* plotfile = new TFile( outName.c_str(), "recreate");
        TH1::AddDirectory(kFALSE);
  
        string reactionName = results.reactionList()[0];
        plotGen.enableReaction( reactionName );
        vector<string> sums = plotGen.uniqueSums();
        vector<string> amps = plotGen.uniqueAmplitudes();
        cout << "\npossible sums:\n----------" << endl;
        for (auto i:sums){
          cout << i << endl;
        }
        cout << "\npossible amps:\n----------" << endl;
        for (unsigned int i=0; i<amps.size(); ++i){
          cout << amps[i];
          if (selectedAmps.find(amps[i])!=selectedAmps.end()){
              selectedAmps[amps[i]]=i;
              cout << " saving this one";
          }
          cout << endl;
        }
  
        cout << "Determining amplitues/sums to use" << endl;
        if(!keepAllAmps){
          for (unsigned int i=0; i<amps.size(); ++i){
            plotGen.disableAmp(i);
          }
          for (std::map<string,int>::iterator it=selectedAmps.begin(); it!=selectedAmps.end(); ++it){
            plotGen.enableAmp(it->second);
          }
        }
  
        // loop over sum configurations (one for each of the individual contributions, and the combined sum of all)
        for (unsigned int isum = 0; isum <= sums.size(); isum++){
  
          // turn on all sums by default
          for (unsigned int i = 0; i < sums.size(); i++){
            plotGen.enableSum(i);
          }
  
          // for individual contributions turn off all sums but the one of interest
          if (isum < sums.size()){
            for (unsigned int i = 0; i < sums.size(); i++){
              if (i != isum) plotGen.disableSum(i);
            }
          }
  
          // loop over data, accMC, and genMC
          cout << "Looping of datasets" << endl;
          for (unsigned int iplot = 0; iplot < PlotGenerator::kNumTypes; iplot++){
            if (isum < sums.size() && iplot == PlotGenerator::kData) continue; // only plot data once
  
            // loop over different variables
            cout << "   looping over requested histograms" << endl;
            for (unsigned int ivar  = 0; ivar  < EtaPiPlotGenerator::kNumHists; ivar++){
              string histname =  "";
              // set unique histogram name for each plot (could put in directories...)
              if (ivar == EtaPiPlotGenerator::kEtaPiMass)  histname += "Mkskl";
              else if (ivar == EtaPiPlotGenerator::kEtaCosTheta)  histname += "cosTheta";
              else if (ivar == EtaPiPlotGenerator::kPhi)  histname += "Phi";
              else if (ivar == EtaPiPlotGenerator::kphi)  histname += "phi";
              else if (ivar == EtaPiPlotGenerator::kPsi)  histname += "psi";
              else if (ivar == EtaPiPlotGenerator::kt)  histname += "t";
              else continue;
  
              if (iplot == PlotGenerator::kData) histname += "_dat";
              if (iplot == PlotGenerator::kBkgnd) histname += "_bkg";
              if (iplot == PlotGenerator::kAccMC) histname += "_acc";
              if (iplot == PlotGenerator::kGenMC) histname += "_gen";
  
              if (isum < sums.size()){
                //ostringstream sdig;  sdig << (isum + 1);
                //histname += sdig.str();
  
              // get name of sum for naming histogram
                string sumName = sums[isum];
                histname += "_";
                histname += sumName;
              }
  
              cout << "      projecting histogram..." << endl;
              Histogram* hist = plotGen.projection(ivar, reactionName, iplot);
              TH1* thist = hist->toRoot();
              thist->SetName(histname.c_str());
              plotfile->cd();
              thist->Write();
            }
          }
        }
        plotfile->Close();
    }
    
    ofstream outfile;
    outfile.open( "kskl_plotter_output.log" );
    outfile << "TOTAL EVENTS = " << results.intensity(doAccCorr).first << " +- " << results.intensity(doAccCorr).second << endl;
    vector<string> fullamps = plotGen.fullAmplitudes();
    for (unsigned int i = 0; i < fullamps.size(); i++){
      vector<string> useamp;  useamp.push_back(fullamps[i]);
      outfile << "FIT FRACTION " << fullamps[i] << " = "
           << results.intensity(useamp, doAccCorr).first /
              results.intensity(doAccCorr).first <<  " +- "
           << results.intensity(useamp, doAccCorr).second /
              results.intensity(doAccCorr).first <<  endl;
    }


  
          // ************************
          // retrieve amplitudes for output
          // ************************
        /*
        // parameters to check
        vector< string > pars;
        pars.push_back("Pi+Pi-::Positive::S0+_re");
        pars.push_back("Pi+Pi-::Positive::S0+_im");
  
        // file for writing parameters (later switch to putting in ROOT file)
        ofstream outfile;
        outfile.open( "twopi_fitPars.txt" );
  
        for(unsigned int i = 0; i<pars.size(); i++) {
          double parValue = results.parValue( pars[i] );
          double parError = results.parError( pars[i] );
          outfile << parValue << "\t" << parError << "\t";
        }
  
        // Note: For twopi_amp_plotter: The following computations are nonsense for amplitudes
  
        // covariance matrix
        vector< vector< double > > covMatrix;
        covMatrix = results.errorMatrix();
  
        double SigmaN = results.parValue(pars[3]) + results.parValue(pars[6]);
        double SigmaN_err = covMatrix[5][5] + covMatrix[8][8] + 2*covMatrix[5][8];
  
        double SigmaD = 0.5*(1 - results.parValue(pars[0])) + results.parValue(pars[2]);
        double SigmaD_err = 0.5*0.5*covMatrix[2][2] + covMatrix[4][4] - 2*0.5*covMatrix[2][4];
  
        double Sigma = SigmaN/SigmaD;
        double Sigma_err = fabs(Sigma) * sqrt(SigmaN_err/SigmaN/SigmaN + SigmaD_err/SigmaD/SigmaD);
  
        double P = 2*results.parValue(pars[6]) - results.parValue(pars[4]);
        double P_err = sqrt(2*2*covMatrix[8][8] + covMatrix[6][6] - 2*2*covMatrix[6][8]);
  
        Sigma = Sigma_err = P = P_err = 0;
        outfile << Sigma << "\t" << Sigma_err << "\t";
        outfile << P << "\t" << P_err << "\t";
  
        outfile << endl;
        */
  
    return 0;

}

